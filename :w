package main

import (
	"encoding/json"
	"fmt"
	"io"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/gdamore/tcell/v2"
	"github.com/rivo/tview"
)


type AppState struct {
	session Session
	file	string
}

var appState AppState

type Session struct{
	Id   			int `json:"id"`
	Name   			string `json:"name"`
	Row 			int `json:"row"`
	Pattern			string `json:"pattern"`
	LastModify		time.Time `json:"lastModify"`
}

func readSession(file string)  Session {
	jsonFile, err := os.Open("lib/"+file)
	if err != nil {
		fmt.Println(err)
	}

	defer jsonFile.Close()
	
	byteValue, _ := io.ReadAll(jsonFile)
	var session Session

	json.Unmarshal(byteValue, &session)
	return session
}

func writeSession(session Session, file string){
	now := time.Now()
	session.LastModify = now

	jsonFile, err := json.Marshal(session)
	if err != nil {
		fmt.Println(err)
	}

	d1 := []byte(jsonFile)
	err = os.WriteFile("lib/"+file, d1, 0644)
	if err != nil {
		fmt.Println(err)
	}

}


func listSessions() []string{
	sessionPath := "lib/"
	entries, err := os.ReadDir(sessionPath)
	if err != nil {
		fmt.Println(err)
	}
	var files[] string
	for _, f := range entries{
		if strings.HasSuffix(f.Name(), ".json"){
			files = append(files, f.Name())
		}
	}
	return files
}

func listPattern() []string{
	patternPath := "patterns/"
	entries, err := os.ReadDir(patternPath)
	if err != nil {
		fmt.Println(err)
	}
	var files[] string
	for _, f := range entries{
		if strings.HasSuffix(f.Name(), ".knit"){
			files = append(files, f.Name())
		}
	}
	return files
}


func newSession(filename string, pattern string) Session{
	sessions := listSessions()

	file := strings.ToLower(filename)
	file = strings.ReplaceAll(file, " ", "_")
	re := regexp.MustCompile(`[^a-z0-9_]`)
	file = re.ReplaceAllString(file, "")

	filepath := "lib/"+file+".json"

	s := Session{
		Id: len(sessions),
		Name: filename,
		Row: 0,
		Pattern: pattern,
	}
	writeSession(s, filepath)
	return s
}


func isSafeToClose() bool {
	if (Session{} != appState.session) {
		sessionFile := readSession(appState.file)
		return appState.session.Row == sessionFile.Row 
	}	
	return true
}

func saveDialog(app *tview.Application, mainView *tview.Flex) *tview.Modal {
	dialog := tview.NewModal()
	dialog.SetText("Session not saved. Wanna save it?").
	AddButtons([]string{"Save", "Quit"}).
	SetDoneFunc(func(buttonIndex int, buttonLabel string) {
		switch buttonLabel {
		case "Save":
			writeSession(appState.session,  appState.file)
			mainView.RemoveItem(dialog)
			app.SetFocus(mainView)
		case "Quit":
			app.Stop()
		}
	})
	return dialog
}

func app() {
    app := tview.NewApplication()

	// -------------- Session Info 
	idForm := tview.NewTextView().SetLabel("Id: ").SetText("")
	nameForm := tview.NewTextView().SetLabel("Name: ").SetText("")
	rowForm := tview.NewTextView().SetLabel("Row: ").SetText("")

	// -------------- Declaring widgets
	sessionInfoBox := tview.NewFlex()
	sessionInfoBox.SetDirection(tview.FlexRow)

	actionList := tview.NewList()
	actionList.ShowSecondaryText(false)

	log := tview.NewTextView()
		
	log.SetBorder(true). 
		SetTitle("log")

	patternBox := tview.NewBox().SetTitle("Pattern").SetBorder(true)

	left := tview.NewFlex().SetDirection(tview.FlexRow)
	placeHolder := tview.NewFlex().SetDirection(tview.FlexRow)
	placeHolder.SetBorder(true)

	flex := tview.NewFlex().SetDirection(tview.FlexColumn)

	// -------------- Updating info function
	updatePlaceHolder := func(widget tview.Primitive, title string){
		placeHolder.Clear()
		placeHolder.AddItem(widget, 0, 1, true)
		app.SetFocus(widget)
		placeHolder.SetTitle(title)
	}

	updateLog := func(text string){
		prevText := log.GetText(false)
		log.SetText(fmt.Sprintf("%s [%s]: %s\n", prevText, time.Now().Format("03:04:00"), text))
	}

	updatePlaceHolder(sessionInfoBox, "Knitting instruction")

	updateInfo := func() {
		sessionInfoBox.Clear()
		sessionInfoBox.AddItem(idForm, 1, 0, false).
			AddItem(nameForm, 1, 0, false).
			AddItem(rowForm, 1, 0, false)
		idForm.SetText(strconv.Itoa(appState.session.Id))
		nameForm.SetText(appState.session.Name)
		rowForm.SetText(strconv.Itoa(appState.session.Row))
		updatePlaceHolder(sessionInfoBox, "Knitting instructions")
		app.SetFocus(actionList)
    }



	actionList.AddItem("pattern","", 'p', func(){
		if !isSafeToClose(){
			updateLog("Not saved")
			return
		}

		patterns := listPattern()
		listMenu := tview.NewFlex().SetDirection(tview.FlexRow)
		patternsEntries := tview.NewFlex().SetDirection(tview.FlexRow)
		patternsList := tview.NewDropDown().SetLabel("Select a pattern")
		form := tview.NewForm()
		var file string

		patternsList.SetOptions(patterns, func(text string, index int) {
			file = text
			textView := form.GetFormItem(1).(*tview.TextView)
			textView.SetText(file)
			inputField := form.GetFormItem(2)
			app.Focus(inputField)
		})

		t := tview.NewTextView().SetText(strings.Join(patterns, "\n"))
		patternsEntries.AddItem(t,0,1,false)

		form.AddFormItem(patternsList).
			AddTextView("Selected pattern:", "none", 0, 0, false, false).
			AddInputField("Session name", "", 0, nil, nil).
			AddButton("Save", func(){
				name := form.GetFormItem(2).(*tview.InputField).GetText()
				appState.session = newSession(name, file)
				updateInfo()
			})
		listMenu.AddItem(patternsEntries, 0, 1, false)
		listMenu.AddItem(form, 0, 1, true)
		updatePlaceHolder(listMenu, "Open session")
		app.SetFocus(listMenu)
	}).
		AddItem("open", "", 'o', func() {
			if !isSafeToClose(){
				updateLog("Not saved")
				return
			}
			sessions := listSessions()
			listMenu := tview.NewFlex().SetDirection(tview.FlexRow)
			sessionEntries := tview.NewFlex().SetDirection(tview.FlexRow)
			sessionList := tview.NewDropDown().SetLabel("Select an option (hit Enter): ")

			sessionList.SetOptions(sessions, func(text string, index int) {
				appState.session = readSession(text)
				appState.file = text
				updateInfo()
			})

			t := tview.NewTextView().SetText(strings.Join(sessions, "\n"))
			sessionEntries.AddItem(t,0,1,false)
			listMenu.AddItem(sessionEntries, 0, 1, false)
			listMenu.AddItem(sessionList, 0, 1, false)
			updatePlaceHolder(listMenu, "Open session")
			app.SetFocus(sessionList)
		}).
		AddItem("new", "", 'n', func(){
			if !isSafeToClose(){
				updateLog("Not saved")
				return
			}
			form := tview.NewForm()
			form.AddInputField("Session name", "", 20, nil, nil).
				AddButton("Save", func(){
					name := form.GetFormItem(0).(*tview.InputField).GetText()
					appState.session = newSession(name, appState.session.Pattern)
					updateInfo()
				}).
				AddButton("Quit", func() {
					app.SetFocus(actionList)
				})
			updatePlaceHolder(form, "New session")
		}).
		AddItem("save", "", 's', func() {
			if isSafeToClose(){
				updateLog("Already saved")
				return
			}
			writeSession(appState.session,  appState.file)
			updateLog("Saved file: "+appState.file)
		}).
		AddItem("close", "", 'q', func() {
			if !isSafeToClose(){
				updateLog("Not saved")
				m := saveDialog(app, flex) 
				flex.AddItem(m, 0,1, true)
				app.SetFocus(m)
				return
			}
			app.Stop()
		})
	

	
	left.AddItem(actionList, 0, 2, true).
		AddItem(placeHolder, 0, 6, false).
		AddItem(log, 0, 2, false)


	flex.AddItem(left, 0, 3, true).
		AddItem(patternBox, 0, 7,  false)

	
	app.SetInputCapture(func(event *tcell.EventKey) *tcell.EventKey {
		if event.Rune() == '+' {
			if (Session{}) == appState.session {return nil}
			appState.session.Row++
			updateInfo()
		} else if event.Rune() == '-' {
			appState.session.Row--
			updateInfo()
		}
		return event
	})

		
	if err := app.SetRoot(flex, true).EnableMouse(true).Run(); err != nil {
		panic(err)
	}
}


